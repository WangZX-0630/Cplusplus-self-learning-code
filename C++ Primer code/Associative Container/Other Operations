#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <utility>

using namespace std;

int main()
{
    set<string>::value_type v1;       // v1 is a string
    map<string, int>::key_type v2;    // v2 is a string
    map<string, int>::mapped_type v3; // v3 is a int
    map<string, int>::value_type v4;  // v4 is a pair<const string, int>

    map<string, string> Players = { {"Michael", "Jordan"},
                                    {"Lebron", "James"},
                                    {"Kobe", "Bryant"} };
    map<string, string>::const_iterator map_iter = Players.cbegin();
    while(map_iter != Players.cend()) {
        cout << map_iter->first << " " << map_iter->second << endl;
        ++map_iter;
    }

    vector<int> ivec{2,4,6,8,2,4,6,2,4,2};
    set<int> s1;
    s1.insert(ivec.cbegin(), ivec.cend());
    s1.insert({1,3,5,7,1,3,5,7});
    // repeated element will automatically be erased
    for(auto i : s1) {
        cout << i << " ";
    } cout << endl;

    // the element type of map is pair, so you must need to insert pairs into a map
    Players.insert(pair<string,string>("Tracy","McGrady"));
    map_iter = Players.cbegin();
    while(map_iter != Players.cend()) {
        cout << map_iter->first << " " << map_iter->second << endl;
        ++map_iter;
    }

    multiset<int> s2;
    s2.insert(ivec.begin(), ivec.end());
    for(auto i : s2) {
        cout << i << " ";
    } cout << endl;
    cout << s2.erase(2) << endl;  // return the number of deleted element


    Players["Michael"] = "Jackson";    // Use map[key] to change the corresponding to key
    cout << Players.at("Michael") << endl;   // map.at(key) return the value corresponding to the key

    //vector<int> v;
    //v[0] = 1;             // error: you can not visit the outside space of the vector
    //cout << v[0] << endl;

    map<int, int> m;
    m[0] = 1;               // correct operation, because map will add a new key if it cannot find one
    cout << m[0] << endl;

    multimap<string, string> Celebrities;
    Celebrities.insert(Players.begin(),Players.end());
    Celebrities.insert(pair<string,string>("Michael","Jordan"));
    Celebrities.insert(pair<string,string>("Michael","Johnson"));
    auto times = Celebrities.count("Michael");   // Michael appear three times
    auto iter = Celebrities.find("Michael");   // Find return the first position Michael appears
    while(times--) {
        cout << iter->first << " " << iter->second << endl;
        ++iter;
    } cout << endl;
    
    // Use equal_range to return a pair of iterators which point out the head and the tail of the key area 
    for(auto pos = Celebrities.equal_range("Michael");
             pos.first != pos.second; ++pos.first) {
        cout << pos.first->first << " " << pos.first->second << endl;
    }
    
    return 0;
}
