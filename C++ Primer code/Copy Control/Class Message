#ifndef CPP_MESSAGE_H
#define CPP_MESSAGE_H


#include <string>
#include <set>
#include <utility>
#include "Folder.h"

class Message {
    friend class Folder;
    friend void swap(Message &lhs, Message &rhs);
public:
    explicit Message(const std::string &str = "") : contents(str) {}
    Message(const Message&);
    Message& operator=(const Message&);
    ~Message();
    void save(Folder&);
    void remove(Folder&);

private:
    std::string contents;
    std::set<Folder*> folders;
    void add_to_Folders(const Message &msg);
    void remove_from_Folders();
};


void Message::save(Folder &f) {
    folders.insert(&f);
    f.addMsg(this);
}
void Message::remove(Folder &f) {
    folders.erase(&f);
    f.remMsg(this);
}
void Message::add_to_Folders(const Message &msg) {
    for(auto f : msg.folders) {
        f->addMsg(this);
    }
}
void Message::remove_from_Folders() {
    for(auto f : folders) {
        f->remMsg(this);
    }
}
Message::Message(const Message &m) : contents(m.contents), folders(m.folders) {
    add_to_Folders(m);
}
Message& Message::operator=(const Message &m) {
    remove_from_Folders();
    contents = m.contents;
    folders = m.folders;
    add_to_Folders(*this);
    return *this;
}
Message::~Message() {
    remove_from_Folders();
}
void swap(Message &lhs, Message &rhs) {
    using std::swap;
    for(auto f : lhs.folders) {
        f->remMsg(lhs);
    }
    for(auto f : rhs.folders) {
        f->remMsg(rhs);
    }
    swap(lhs.folders, rhs.folders);
    swap(lhs.contents, rhs.contents);
    for(auto f : lhs.folders) {
        f->addMsg(lhs);
    }
    for(auto f : rhs.folders) {
        f->addMsg(rhs);
    }
}

#endif //CPP_MESSAGE_H
