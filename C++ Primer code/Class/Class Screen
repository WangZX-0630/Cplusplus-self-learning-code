#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Screen {
    friend class Window_mgr;
public:
    typedef string::size_type pos;
    Screen() = default;
    Screen(pos ht, pos wd) : height(ht), width(wd), contents(ht * wd, ' ') {}
    Screen(pos ht, pos wd, char c) : height(ht), width(wd),contents(ht * wd, c) {}

    char get() const {return contents[cursor]; }      // read char at the position of cursor
    char get(pos r, pos c) const;
    Screen &move(pos r, pos c);             // Usually inline is stated outside the class
    Screen &set(char);
    Screen &set(pos, pos, char);
    // Overload function display basing on whether the object is const
    Screen &display(ostream &os) {do_display(os); return *this; }
    const Screen &display(ostream &os) const {do_display(os); return *this; }
    pos size() const {return height * width; }

private:
    pos cursor = 0;
    pos height = 0, width = 0;
    string contents;
    void do_display(ostream &os) const {os << contents; }
};

inline char Screen::get(pos r, pos c) const {
    pos row = r * width;
    return contents[row + c];
}
inline Screen &Screen::move(pos r, pos c) {
    pos row = r * width;
    cursor = row + c;
    return *this;
}
inline Screen &Screen::set(char c) {
    contents[cursor] = c;
    return *this;
}
inline Screen &Screen::set(pos r, pos c, char ch) {
    contents[r * width + c] = ch;
    return *this;
}



class Window_mgr {
public:
    using ScreenIndex = vector<Screen>::size_type;
    void clear(ScreenIndex);
    ScreenIndex addScreen(const Screen &);

private:
    vector<Screen> screens{Screen(24, 80, ' ')};
};

void Window_mgr::clear(ScreenIndex i) {
    Screen &s = screens[i];
    s.contents = string(s.height * s.width, ' ');
}
Window_mgr::ScreenIndex Window_mgr::addScreen(const Screen &s) {
    screens.push_back(s);
    return screens.size() - 1;
}




int main()
{
    Screen myScreen(5, 5, 'X');
    myScreen.move(4, 0).set('#').display(cout);
    cout << endl;
    cout << myScreen.size() << endl;
    myScreen.set(2,0,'$').display(cout);
    cout << endl;

    return 0;
}


