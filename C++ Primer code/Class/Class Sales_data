#include <iostream>
#include <string>

using namespace std;

class Sales_data {
    // statement of friend is usually at the start of the definition of class
    // but friend isn't a member of class
    friend Sales_data add(const Sales_data&, const Sales_data&);
    friend istream &read(istream&, Sales_data&);
    friend ostream &print(ostream&, const Sales_data&);

public:
    Sales_data() = default;
    Sales_data(const string &s, unsigned n, double p) :
               bookNo(s), units_sold(n), revenue(p * n) {}
    Sales_data(const string &s) : bookNo(s) {}
    Sales_data(istream &);

    string isbn() const {return bookNo; }
    Sales_data &combine(const Sales_data&);

private:
    double avg_price() const {
        return units_sold? revenue / units_sold : 0;
    }
    string bookNo;
    unsigned units_sold = 0;
    double revenue = 0.0;
};

Sales_data::Sales_data(istream &is) {
    read(is, *this);
}

Sales_data & Sales_data:: combine(const class Sales_data & rhs) {
    units_sold += rhs.units_sold;
    revenue += rhs.revenue;
    return *this;
}

istream & read(istream &is, Sales_data &item) {
    double price = 0;
    is >> item.bookNo >> item.units_sold >> price;
    item.revenue = item.units_sold * price;
    return is;
}

ostream & print(ostream &os, const Sales_data &item) {
    os << item.isbn() << " " << item.units_sold << " "
       << item.revenue << " " << item.avg_price();
    return os;
}

Sales_data add(const Sales_data &item1, const Sales_data &item2) {
    Sales_data sum = item1;
    sum.combine(item2);
    return sum;
}


int main()
{
    Sales_data total;
    if(read(cin, total)) {
        Sales_data trans;
        while(read(cin, trans)) {
            if(total.isbn() == trans.isbn())
                total.combine(trans);
            else {
                print(cout, total) << endl;
                total = trans;
            }
        }
        print(cout, total) << endl;
    } else {
        cerr << "No data?" << endl;
    }
    
    return 0;
}
